@model WebModels.WebContentInformation

@using (Html.BeginForm("Edit", "WebContentInformation", new { }, FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal fix" }))
{
    
    <div class="control-group">
        @Html.LabelFor(m => m.Title, new { @class = "control-label" })
        <div class="controls">
            @Html.TextBoxFor(m => m.Title, new { @class = "input-block-level" })
            @Html.ValidationMessageFor(m => m.Title)
        </div>
    </div>
       <div class="control-group">
                        @Html.LabelFor(m => m.Description, new { @class = "control-label" })
                        <div class="controls">
                            @Html.TextAreaFor(m => m.Description, new { @class = "input-block-level" })

                        </div>
                    </div>
    <div class="control-group">
        @Html.LabelFor(m => m.Width, new { @class = "control-label" })
        <div class="controls">
            @(Html.Kendo().NumericTextBoxFor<int>(m => m.Width)
                                                    .Min(1)
                                                    .Max(12).Format("#")
            )
        </div>
    </div>
    <div class="control-group">
        @Html.LabelFor(m => m.Order, new { @class = "control-label" })
        <div class="controls">
            @(Html.Kendo().NumericTextBoxFor<int>(m => m.Order)
                                                    .Min(0)
                                                    .Max(100).Format("#")
            )
        </div>
    </div>
    <div class="row-fluid control-group">
        <div style="width:99%;">
            <div class="box">
                <div class="box-title">
                    <h3><i class="icon-th"></i>  @Html.DisplayNameFor(m => m.Body)</h3>
                </div>
                <div class="box-content nopadding">
                    @Html.TextAreaFor(m => m.Body, new { @id = "ckeditor", @style = "height:550px;" })
                    <script>
                        var editor = CKEDITOR.replace('ckeditor', {
                            customConfig: '/content/ckeditor/config.js',
                            filebrowserBrowseUrl: '/admin/upload/file?uid=@ViewBag.UID',
                            filebrowserImageBrowseUrl: '/admin/upload/image?uid=@ViewBag.UID',
                            filebrowserImageUploadUrl: '/admin/upload/imageck?uid=@ViewBag.UID',
                            filebrowserFlashBrowseUrl: '/admin/upload/flash?uid=@ViewBag.UID',
                            filebrowserFlashUploadUrl: '/admin/upload/flashck?uid=@ViewBag.UID',
                            height: '400px'
                        });
                    </script>
                </div>
            </div>
        </div>
    </div>


    <div class="form-actions">
        <button class="btn btn-primary" type="submit"><i class="icon-save"></i> @Resources.Common.SaveChanges</button>
    </div>
    @Html.AntiForgeryToken()
}
<script type="text/javascript">
    top.winsetup("@Html.Raw(Resources.Common.EditItem)", 900, 550, true);
    function edit_success() {
        top.winclose();
        top.$("#grid").data("kendoGrid").dataSource.read();
    }
    var imageFilter = new Array('.jpg', '.png', '.gif', '.bmp');
    function checkFileType(file, filter) {
        var fileName = file.name;
        var fileExtension = fileName.substring(fileName.lastIndexOf('.'));
        if (filter.indexOf(fileExtension.toLowerCase()) < 0) {
            return false;
        }
        return true;
    }
    var maxImageFileSize = 5242880;
    function checkFileSize(file, maxFileSize) {
        if (file.size > maxFileSize) {
            return false;
        }
        return true;
    }
    var current_thumb = "";
    $(document).ready(function () {
        current_thumb = $('.thumb #image').val();
    });
    $('.file-image').change(function (e) {
        var files = this.files;
        if (files.length > 0) {
            var i = 0;
            var isValid = checkFileType(files[i], imageFilter) && checkFileSize(files[i], maxImageFileSize);
            if (isValid) {
                var reader = new FileReader();
                reader.readAsDataURL(files[i]);
                reader.onloadend = function (e) {
                    var result = e.target.result;
                    if (result != null) {
                        $('.ctr-thumb .thumb img').attr('src', result);
                    }
                }
            }
            else {
                alert('File: [' + files[i].name + '] tải lên không hợp lệ.\nFile hợp lệ là file ảnh có định dạng: ' + imageFilter.toString() + ' và dung lượng tối đa cho phép là: ' + maxImageFileSize / (1024 * 1024) + 'MB');
            }
        }
    });
    function setimagepath(path) {
        $('.ctr-thumb .thumb img').attr('src', path);
        $('.ctr-thumb .thumb .hf-image').val(path);
        var fileimage = $('.file-image');
        fileimage = fileimage.replaceWith(fileimage.clone(true));
    }
</script>